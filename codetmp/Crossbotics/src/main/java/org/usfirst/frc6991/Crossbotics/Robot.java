// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6991.Crossbotics;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc6991.Crossbotics.commands.*;
// import org.usfirst.frc6991.Crossbotics.subsystems.*;
import org.usfirst.frc6991.Crossbotics.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    public static RobotMap map;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // public static climb climb;
    // public static drive drive;
    // public static intake intake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // climb = new climb();
        // drive = new drive();
        // intake = new intake();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        map = new RobotMap();

        CameraServer.getInstance().startAutomaticCapture();
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        teleopInit();
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        teleopPeriodic();
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        map.getMecanumDrive().driveCartesian(0, 0, 0);
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        drive();
        intake();
        // climb();
    }

    public void drive(){
        if(Math.abs(oi.getPlaneX())>=0.2){ 
            map.getMecanumDrive().driveCartesian(-oi.getPlaneX()*0.9, 0, 0);
            System.out.println("X:"+oi.getPlaneX());
        }
        if(Math.abs(oi.getPlaneY())>=0.2){
            map.getMecanumDrive().driveCartesian(0, oi.getPlaneY()*0.8, 0);
            System.out.println("Y:"+oi.getPlaneY());
        }
        if(Math.abs(oi.getPlaneZ())>=0.4){
            map.getMecanumDrive().driveCartesian(0, 0, -oi.getPlaneZ()*0.5);
            System.out.println("Z:"+oi.getPlaneZ());
        }
        if(Math.abs(oi.getPlaneX())<0.2&&Math.abs(oi.getPlaneY())<0.2&&Math.abs(oi.getPlaneZ())<0.2){
            map.getMecanumDrive().driveCartesian(0, 0, 0);
            System.out.println("Stopped.");
        }
    }

    public void intake(){
        // if(Math.abs(oi.hand_toBack())>=0.2){
        //     map.rotate_Left_Motor.set(oi.hand_toBack());
        //     map.rotate_Right_Motor.set(oi.hand_toBack());
        // }
        // if(Math.abs(oi.hand_toForward())>=0.2){
        //     map.rotate_Left_Motor.set(-oi.hand_toForward());
        //     map.rotate_Right_Motor.set(-oi.hand_toForward());
        // }
        // if(oi.ball_in()){
        //     map.intake_Left_Motor.set(0.5);
        //     map.intatke_Right_Motor.set(0.5);
        // }
        // if(oi.ball_in()){
        //     map.intake_Left_Motor.set(-0.5);
        //     map.intatke_Right_Motor.set(-0.5);
        // }
        if(oi.plate_Out()){
            map.intake_Plate.set(Value.kForward);
            System.out.println("out");
        }
        else{
            map.intake_Plate.set(Value.kReverse);
            System.out.println("in");
        }
    }

    // public void climb(){
    //     if(oi.climb_Up()){
    //         map.climb_Left_Solenoid.set(Value.kForward);
    //         map.climb_Right_Solenoid.set(Value.kForward);
    //     }
    //     if(oi.climb_Down()){
    //         map.climb_Left_Solenoid.set(Value.kReverse);
    //         map.climb_Right_Solenoid.set(Value.kReverse);
    //     }
    // }
}
