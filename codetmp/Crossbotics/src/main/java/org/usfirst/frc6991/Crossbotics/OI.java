// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6991.Crossbotics;

import org.usfirst.frc6991.Crossbotics.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
// import org.usfirst.frc6991.Crossbotics.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick plane_Controller;
    public JoystickButton climb_Up;
    public JoystickButton climb_Down;
    public JoystickButton plate_In;
    public JoystickButton plate_Out;
    // public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


        // joystick = new Joystick(1);
        
        // plate_Out = new JoystickButton(joystick, 6);
        // plate_Out.whileHeld(new Put_Plate());
        // plate_In = new JoystickButton(joystick, 5);
        // plate_In.whileHeld(new Take_Plate());
        // climb_Down = new JoystickButton(joystick, 1);
        // climb_Down.whileHeld(new Decline());
        // climb_Up = new JoystickButton(joystick, 1);
        // climb_Up.whileHeld(new Climb());
        plane_Controller = new Joystick(0);
        


        // // SmartDashboard Buttons
        // SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        // SmartDashboard.putData("Climb", new Climb());
        // SmartDashboard.putData("Decline", new Decline());
        // SmartDashboard.putData("Take_Ball", new Take_Ball());
        // SmartDashboard.putData("Put_Ball", new Put_Ball());
        // SmartDashboard.putData("Take_Plate", new Take_Plate());
        // SmartDashboard.putData("Put_Plate", new Put_Plate());

        // // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public double getPlaneX(){
        return plane_Controller.getX();
    }

    public double getPlaneY(){
        return plane_Controller.getY();
    }

    public double getPlaneZ(){
        return plane_Controller.getZ();
    }

    public boolean plate_Out(){
        return plane_Controller.getRawButton(1);
    }

    // public boolean climb_Down(){
    //     return joystick.getRawButtonPressed(1);
    // }

    // public boolean climb_Up(){
    //     return joystick.getRawButtonPressed(2);
    // }

    // public double hand_toBack(){
    //     return joystick.getRawAxis(3);
    // }

    // public double hand_toForward(){
    //     return joystick.getRawAxis(2);
    // }

    // public boolean ball_in(){
    //     return joystick.getPOV(0)>=315||joystick.getPOV(0)<=45;
    // }

    // public boolean ball_out(){
    //     return joystick.getPOV(0)>=135&&joystick.getPOV(0)<=225;
    // }


    // // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // public Joystick getPlane_Controller() {
    //     return plane_Controller;
    // }

    // public Joystick getJoystick() {
    //     return joystick;
    // }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

